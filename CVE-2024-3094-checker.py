#!/usr/bin/env python3
# CVE-2024-3094-checker.py

# Original script:
# https://www.openwall.com/lists/oss-security/2024/03/29/4

# Modified (fixed and features added) by cyclone
# https://github.com/cyclone-github/scripts/blob/main/xz_cve-2024-3094-detect.sh

# Tested on Debian

# https://nvd.nist.gov/vuln/detail/CVE-2024-3094
# https://github.com/advisories/GHSA-rxwq-x6h5-x525

# v1.0.0; 2024-03-29

import os
import subprocess

def check_vulnerability():
    print("Checking system for CVE-2024-3094 Vulnerability...")
    print("https://nvd.nist.gov/vuln/detail/CVE-2024-3094")

    # Find path to liblzma used by sshd
    # Adapted from https://www.openwall.com/lists/oss-security/2024/03/29/4
    sshd_path = subprocess.check_output(["whereis", "-b", "sshd"]).split()[1].decode('utf-8')
    path = subprocess.check_output(["ldd", sshd_path]).decode('utf-8').split('liblzma')[1].split()[2]

    if not path:
        print("\nProbably not vulnerable (liblzma not found)")
        exit()

    # Check for function signature
    # Adapted from https://www.openwall.com/lists/oss-security/2024/03/29/4
    print("\nChecking for function signature in liblzma...")
    hexdump_output = subprocess.check_output(["hexdump", "-ve", "1/1 %.2x", path]).decode('utf-8')
    if 'f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410' in hexdump_output:
        print("Function signature in liblzma: VULNERABLE")
    else:
        print("Function signature in liblzma: OK")

    # Check xz version
    xz_version = subprocess.check_output(["xz", "--version"]).decode('utf-8').split('\n')[0].split()[3]
    pwn_version = "5.6.0"
    print("\nChecking xz version...")
    if sorted([xz_version, pwn_version])[0] == pwn_version:
        print(f"xz version {xz_version}: VULNERABLE")
    else:
        print(f"xz version {xz_version}: OK")

if __name__ == "__main__":
    check_vulnerability()
