#!/usr/bin/env python3

import os

# Start with liblzma
LIBS = ["liblzma.so.5"]

LIB_DIRS = ["/usr/lib", "/lib"]
BIN_DIRS = ["/usr/bin", "/bin", "/usr/local/bin"]

RED = '\033[0;31m'
YELLOW = '\033[1;33m'
NC = '\033[0m'  # No Color

def test_lib(lib_path):
    deps = os.popen(f"ldd {lib_path} 2>/dev/null").read()
    for lib in LIBS:
        if lib in deps:
            print(f"{YELLOW}{lib_path}{NC} depends on potentially problematic {YELLOW}{lib}{NC}")
            LIBS.append(lib_path)
            return

def find_affected_libs():
    for lib_dir in LIB_DIRS:
        for root, _, files in os.walk(lib_dir):
            for file in files:
                if file.endswith(".so"):
                    test_lib(os.path.join(root, file))

def test_binary(bin_path):
    deps = os.popen(f"ldd {bin_path} 2>/dev/null").read()
    for lib in LIBS:
        if lib in deps:
            print(f"{RED}{bin_path}{NC} depends on potentially problematic {YELLOW}{lib}{NC}")
            return

def find_affected_binaries():
    for bin_dir in BIN_DIRS:
        for root, _, files in os.walk(bin_dir):
            for file in files:
                if os.access(os.path.join(root, file), os.X_OK):
                    test_binary(os.path.join(root, file))

# find_affected_libs()
find_affected_binaries()
