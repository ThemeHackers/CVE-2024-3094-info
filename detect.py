import subprocess

# Find path to liblzma used by sshd
sshd_path = subprocess.run(['which', 'sshd'], capture_output=True, text=True).stdout.strip()
ldd_output = subprocess.run(['ldd', sshd_path], capture_output=True, text=True).stdout
liblzma_path = None

# Extract path to liblzma
for line in ldd_output.split('\n'):
    if 'liblzma' in line:
        liblzma_path = line.split()[2].strip()
        break

# Check if liblzma exists and if so, check for the vulnerable function signature
if liblzma_path:
    with open(liblzma_path, 'rb') as f:
        content = f.read()
        vulnerable_signature = b'\xf3\x0f\x1e\xfaUH\x89\xf5L\x89\xceS\x89\xfb\x81\xe7\x00\x00\x00\x00\x80H\x83\xec(\x48\x89T$\x18H\x89L$\x10'
        if vulnerable_signature in content:
            print("Probably vulnerable")
        else:
            print("Probably not vulnerable")
else:
    print("Probably not vulnerable")
