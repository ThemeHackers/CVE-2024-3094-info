#!/usr/bin/env python3

import subprocess

def check_liblzma():
    # Find path to sshd
    sshd_path = subprocess.run(['whereis', '-b', 'sshd'], capture_output=True, text=True).stdout.split()[1]

    # Find path to liblzma used by sshd
    ldd_output = subprocess.run(['ldd', sshd_path], capture_output=True, text=True).stdout
    liblzma_path = None

    for line in ldd_output.split('\n'):
        if 'liblzma' in line:
            liblzma_path = line.split()[2]
            break

    if not liblzma_path:
        print("Probably not vulnerable (liblzma not found)")
        return

    # Check for function signature
    print("\nChecking for function signature in liblzma...")
    with open(liblzma_path, 'rb') as f:
        content = f.read()
        if b'f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410' in content:
            print("Function signature in liblzma: VULNERABLE")
        else:
            print("Function signature in liblzma: OK")

def check_xz_version():
    # Check xz version
    xz_version_output = subprocess.run(['xz', '--version'], capture_output=True, text=True).stdout.split('\n')[0]
    xz_version = xz_version_output.split()[3]

    pwn_version = "5.6.0"
    print("\nChecking xz version...")
    if xz_version >= pwn_version:
        print(f"xz version {xz_version}: VULNERABLE")
    else:
        print(f"xz version {xz_version}: OK")

def main():
    print("Checking system for CVE-2024-3094 Vulnerability...")
    print("https://nvd.nist.gov/vuln/detail/CVE-2024-3094\n")
    check_liblzma()
    check_xz_version()

if __name__ == "__main__":
    main()
